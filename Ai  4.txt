1)4 queen
def is_safe(board, row, col, n):
    # Check if there is a queen in the same row on the left side
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check lower diagonal on left side
    for i, j in zip(range(row, n, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens_util(board, col, n):
    # Base case: If all queens are placed, then return true
    if col >= n:
        return True

    # Try placing this queen in all rows one by one
    for i in range(n):
        if is_safe(board, i, col, n):
            board[i][col] = 1  # Place the queen

            # Recur to place the rest of the queens
            if solve_n_queens_util(board, col + 1, n):
                return True

            # If placing queen in board[i][col] does not lead to a solution, then remove queen
            board[i][col] = 0

    # If the queen cannot be placed in any row in this column, return False
    return False

def solve_n_queens(n):
    # Create a blank board
    board = [[0 for _ in range(n)] for _ in range(n)]

    # Call the utility function to solve the N queens problem
    if not solve_n_queens_util(board, 0, n):
        print("Solution does not exist")
        return False

    # Print the solution
    print("Solution for", n, "queens:")
    for row in board:
        print(row)

# Example Usage
n = 4
solve_n_queens(n)


2) map coloring
 
def is_safe(graph, node, color, color_map):
    for neighbor in graph[node]:
        if neighbor in color_map and color_map[neighbor] == color:
            return False
    return True

def map_coloring_util(graph, colors, node, color_map):
    if node == len(graph):
        return True
    for color in colors:
        if is_safe(graph, node, color, color_map):
            color_map[node] = color
            if map_coloring_util(graph, colors, node + 1, color_map):
                return True
            color_map[node] = None
    return False

def map_coloring(graph, colors):
    color_map = {node: None for node in graph}
    if map_coloring_util(graph, colors, 0, color_map):
        print("Map coloring solution:")
        for node, color in color_map.items():
            print(f"Node {node}: {color}")
    else:
        print("No Solution found")

graph = {
    0: [1, 2],
    1: [0, 2, 3],
    2: [0, 1, 3],
    3: [1, 2]
}

colors = ['Red', 'Green', 'Blue']
map_coloring(graph, colors)

